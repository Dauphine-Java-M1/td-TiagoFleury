Tiago Fleury

################# - TD00 -
POM : fichier xml qui décrit comment est construit tout le projet

groupID : paramètre du POM. L'identifiant du groupe auquel appartient le projet
artifactID : identifiant de l'artifact (du projet)

<maven.compiler.source> c'est pour spécifier la version de java à utiliser pour créer les .class à partir des .java
<maven.compiler.target> c'est pour spécifiier la version de java à utiliser pour executer les .java

8. le class path sert à spécifier ou est la classe à executer.


################ - TD00bis -



Exercice 1:

2. Les fichiers qui ne peuvent pas être regénérés sont le pom.xml, PrimeCollection.java et le fichier REPONSES.txt
   Le fichier td00-1.0-SNAPSHOT.jar lui peut être regénéré facilement.
   
5. Git affiche ce qui diffère entre la version précédente et celle que je suis en train d'écrire
	COMMANDE > git diff
	
10. Comparer dernier et avant dernier commit avec > git diff HEAD HEAD^



Exercice 2:

3. La branche master apparait en vert

5. Il y a une erreur, je ne peux pas push sur master car la branche contient du travail que je n'ai pas en local.

6. Les deux versions du fichier REPONSE ont été fusionnées.

7. Si les deux changements avaient été faits sur la même ligne, il y aurait eu un conflit.


Exercice 3 :

2. La méthode assertTrue(param) valide le test si la valeur entre parenthèse est un booléen true



################ - TD01 -

Exercice 1 :

1. Cela fonctionne parce qu'on fait appel aux attributs depuis la classe Point.
Egalement parce qu'il y a un constructeur par défaut qui initialise les attributs à null quand on n'en définit pas.


2. Il y a une erreur à la compilation parce qu'on ne peut pas accéder aux attributs. Pour y remédier il faut faire des accesseurs ou bien passer les attributs en public.

3. On préfère mettre les champs d'une classe en privé pour éviter que des autres programmeurs qui ne savent pas comment fonctionne la classe puisse modifier les valeurs des attributs
	de manière 'brutale'
	
4. Un accesseur est une fonction qui sert à renvoyer la valeur d'un attribut. Il y en a une par attribut. Il serait bien d'en faire un ici.

5. A partir du moment ou on a créé un constructeur, le constructeur par défaut de java n'existe plus. Il faut donc recréer un constructeur avec zero paramètres.

6. Il y a une ambiguité dans le nom des variables. On peut utiliser le mot clé this pour éviter toute ambiguité.

7. Il faut créer un compteur statique qui est incrémenté chaque fois qu'un objet Point est instancié.

8. Il appelle le constructeur qui correspond aux paramètres qu'on a rentré.

9. Il faut réecrire la méthode toString()





Exercice 2 :

1.Il affiche :

true
false

Parce que p2 et p1 pointent vers la même adresse mémoire alors que p3 pointe vers un autre objet qui est situé à une autre adresse mémoire.


2. La recherche de l'indice fonctionne bien pour p2 mais pas pour p3 alors qu'ils ont les mêmes coordonnées. C'est parce que indexOf utilise la fonction equals() de la classe Object.


3. Si on dépasse la capacité fixée, il y a une erreur à l'execution. Ce qu'on essaie d'éviter le plus possible.


Exercice 3 :





